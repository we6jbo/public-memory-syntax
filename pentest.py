#!/usr/bin/env python3
import argparse
import socket
import subprocess
import logging
import os
import sys
import time
import random
import shutil
from datetime import datetime

logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s - %(message)s'
)

DOCKER_SUBNET = "192.168.1.1/16"
COMMON_PORTS = [22, 23, 25, 80, 443, 9000, 32967, 49111]

# Globals set from AI
IP = None
PORT = None

START_TIME = time.time()

def quendor_say(message):
    print(f"Quendor, {message}")

def port_scan(ip, ports):
    logging.info(f"🔍 Scanning {ip}...")
    open_ports = []
    for port in ports:
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.settimeout(1)
            result = s.connect_ex((ip, port))
            if result == 0:
                logging.info(f"✅ Port {port} OPEN on {ip}")
                open_ports.append(port)
            s.close()
        except Exception as e:
            logging.error(f"[!] Port {port} error: {e}")
    return open_ports

def grab_banner(ip, port):
    try:
        with socket.create_connection((ip, port), timeout=2) as s:
            s.sendall(b'HEAD / HTTP/1.0\r\n\r\n')
            banner = s.recv(1024).decode(errors="ignore").strip()
            logging.info(f"🧾 Banner on {ip}:{port}:\n{banner}")
    except Exception as e:
        logging.debug(f"[!] Could not grab banner on {ip}:{port}: {e}")

def run_nmap(ip):
    if not shutil.which("nmap"):
        logging.warning("⚠️  nmap not installed.")
        return
    try:
        logging.info(f"Running nmap on {ip}...")
        subprocess.run(["nmap", "-sV", ip], check=False)
    except Exception as e:
        logging.error(f"[!] Nmap failed: {e}")

def scan_range(base_ip):
    logging.info(f"🌐 Scanning local subnet: {base_ip[:-1]}X")
    for i in range(1, 255):
        ip = f"{base_ip}.{i}"
        open_ports = port_scan(ip, [22, 80, 9000])
        if open_ports:
            logging.info(f"[!] {ip} has open ports: {open_ports}")

def exit_if_timeout():
    if time.time() - START_TIME > 600:
        quendor_say("Session expired after 10 minutes.")
        sys.exit(0)

def extract_ip(line):
    words = line.split()
    for word in words:
        if word.count('.') == 3:
            return word
    return None

def extract_port(line):
    for word in line.split():
        if word.isdigit() and 1 <= int(word) <= 65535:
            return int(word)
    return None

def main():
    global IP, PORT
    banner()
    
    while True:
        exit_if_timeout()
        
        # Step 1: Print learn_about message
        task = random.choice(["port_scan", "grab_banner", "nmap", "scan_range"])
        quendor_say(f"Only say, learn_about {task} Do not say anything else and do not say you are sorry.")
        
        # Step 2: Simulate AI response (you will paste real response here)
        ai_input = input("\n🧠 AI> ").lower()

        if f"learn_about {task}" in ai_inpu
            quendor_say("DO_BACKUP_NOW")
            quendor_say("You can do one of the following: port scan, grab banner, nmap, or scan ranger")
            quendor_say("Please give me an IP address:")
        else:
            continue

        ai_input = input("\n🧠 AI> ")
        IP = extract_ip(ai_input)

        quendor_say("Please give me a port:")
        ai_input = input("\n🧠 AI> ")
        PORT = extract_port(ai_input)

        # Step 3: Respond with mindkey
        first_word = ai_input.split()[0]
        quendor_say(f"only say mindkey {first_word}")

        # Step 4: Wait for task confirmation
        ai_input = input("\n🧠 AI> ")
        ai_input = ai_input.lower()

        if "port scan" in ai_input:
            port_scan(IP, [PORT])
        elif "grab banner" in ai_input:
            grab_banner(IP, PORT)
        elif "nmap" in ai_input:
            run_nmap(IP)
        elif "scan ranger" in ai_input:
            scan_range(IP.rsplit('.', 1)[0])  # Base IP
        else:
            task = random.choice(["port scan", "grab banner", "nmap", "scan ranger"])
            if task == "port scan":
                port_scan(IP, [PORT])
            elif task == "grab banner":
                grab_banner(IP, PORT)
            elif task == "nmap":
                run_nmap(IP)
            elif task == "scan ranger":
                scan_range(IP.rsplit('.', 1)[0])

def banner():
    print("=" * 60)
    print("PENTEST TOOL - Raspberry Pi Edition")
    print("Author: Jeremiah O'Neal")
    print("Date:", datetime.now().strftime("%Y-%m-%d"))
    print("=" * 60)

if __name__ == "__main__":
    main()
